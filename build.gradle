plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7+'
}

version = "${mod_version}-${mc_version}"
group = 'net.grid.vampiresdelight'
archivesBaseName = 'VampiresDelight'

mixin {
    add sourceSets.main, "vampiresdelight.refmap.json"
    config "vampiresdelight.mixins.json"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}-${mc_version}"
    runs {
        client {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'

            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'vampiresdelight'

            mods {
                vampiresdelight {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'vampiresdelight'

            mods {
                vampiresdelight {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'vampiresdelight'

            mods {
                vampiresdelight {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'vampiresdelight', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), "--existing", file("src/main/resources"), "--existing-mod", "farmersdelight", "--existing-mod", "vampirism"

            environment 'target', 'fmluserdevdata'

            mods {
                vampiresdelight {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Vampirism
    maven {
        url = "https://maven.maxanier.de/releases"
    }

    // For Farmer's Delight and others
    maven {
        url "https://www.cursemaven.com"
    }

    // Apple Skin
    maven {
        url "https://maven.ryanliptak.com/"
    }

    // JEI
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("curse.maven:farmers-delight-398521:${farmersdelight_version}")
    implementation fg.deobf("de.teamlapen.vampirism:Vampirism:${mc_version}-${vampirism_version}")

    // AppleSkin
    compileOnly fg.deobf("squeek.appleskin:appleskin-forge:mc1.20.1-${appleskin_version}:api")
    compileOnly fg.deobf("squeek.appleskin:appleskin-forge:mc1.20.1-${appleskin_version}")
    if (include_appleskin.toBoolean())
        runtimeOnly fg.deobf("squeek.appleskin:appleskin-forge:mc1.20.1-${appleskin_version}")
    
    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))

    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    // Werewolves
    if (include_werewolves.toBoolean())
        runtimeOnly fg.deobf("curse.maven:werewolves-become-a-beast-417851:${werewolves_version}")

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

processResources {
    var replaceProperties = [
            mod_version: mod_version,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_display_name: mod_display_name,
            mod_license: mod_license,
            credits: credits,

            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,

            mc_version: mc_version,
            mc_version_range: mc_version_range,

            vampirism_version_range: vampirism_version_range,
            farmersdelight_version_range: farmersdelight_version_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "vampiresdelight",
                "Specification-Vendor"    : "grid",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : "VampiresDelight",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "grid",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
